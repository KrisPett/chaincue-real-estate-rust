//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use super::sea_orm_active_enums::HouseTypes;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "houses")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub id: String,
    pub created_at: Option<DateTimeWithTimeZone>,
    pub updated_at: Option<DateTimeWithTimeZone>,
    #[sea_orm(column_type = "Text", nullable)]
    pub title: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub location: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub country: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub city: Option<String>,
    pub number_rooms: Option<i64>,
    pub beds: Option<i64>,
    pub price: Option<i64>,
    #[sea_orm(column_type = "Text")]
    pub src: String,
    pub sold: Option<bool>,
    pub house_types: Option<HouseTypes>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::brokers::Entity")]
    Brokers,
    #[sea_orm(has_many = "super::house_images::Entity")]
    HouseImages,
}

impl Related<super::brokers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Brokers.def()
    }
}

impl Related<super::house_images::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::HouseImages.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
